/* eslint-disable import/prefer-default-export */
import _ from "lodash";
import { Appearance } from "react-native";
import Colors from "./_color";
export class SchemaClass {
  schemes = {
    light: {},
    dark: {}
  };
  currentScheme = "default";

  constructor() {
    Object.assign(this, Colors);
    Appearance.addChangeListener(() => {
      if (this.currentScheme === "default") {
        Object.assign(this, this.schemes[Appearance.getColorScheme() ?? "light"]);
      }
    });
  }
  /**
   * Load set of schemes for light/dark mode
   * arguments:
   * schemes - two sets of map of colors e.g {light: {screen: 'white'}, dark: {screen: 'black'}}
   */


  loadSchemes(schemes) {
    const lightSchemeKeys = Object.keys(schemes.light);
    const darkSchemeKeys = Object.keys(schemes.dark);

    const missingKeys = _.xor(lightSchemeKeys, darkSchemeKeys);

    if (!_.isEmpty(missingKeys)) {
      console.error(`There is a mismatch in scheme keys: ${missingKeys.join(", ")}`);
    }

    this.schemes = schemes;
    const colorScheme = this.getScheme();
    Object.assign(this, this.schemes[colorScheme]);
  }
  /**
   * Get app's current color scheme
   */


  getScheme() {
    const scheme = this.currentScheme === "default" ? Appearance.getColorScheme() : this.currentScheme;
    return scheme ?? "light";
  }
  /**
   * Set color scheme for app
   * arguments:
   * scheme - color scheme e.g light/dark/default
   */


  setScheme(scheme) {
    if (!["light", "dark", "default"].includes(scheme)) {
      throw new Error(`${scheme} is invalid colorScheme, please use 'light' | 'dark' | 'default'`);
    }

    this.currentScheme = scheme;
    const colorScheme = this.getScheme();
    Object.assign(this, this.schemes[colorScheme]);
  }

} //@ts-ignore

const Scheme = SchemaClass;
export default Scheme;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHlsZS9jb2xvci9fc2NoZW1lLnRzIl0sIm5hbWVzIjpbIl8iLCJBcHBlYXJhbmNlIiwiQ29sb3JzIiwiU2NoZW1hQ2xhc3MiLCJzY2hlbWVzIiwibGlnaHQiLCJkYXJrIiwiY3VycmVudFNjaGVtZSIsImNvbnN0cnVjdG9yIiwiT2JqZWN0IiwiYXNzaWduIiwiYWRkQ2hhbmdlTGlzdGVuZXIiLCJnZXRDb2xvclNjaGVtZSIsImxvYWRTY2hlbWVzIiwibGlnaHRTY2hlbWVLZXlzIiwia2V5cyIsImRhcmtTY2hlbWVLZXlzIiwibWlzc2luZ0tleXMiLCJ4b3IiLCJpc0VtcHR5IiwiY29uc29sZSIsImVycm9yIiwiam9pbiIsImNvbG9yU2NoZW1lIiwiZ2V0U2NoZW1lIiwic2NoZW1lIiwic2V0U2NoZW1lIiwiaW5jbHVkZXMiLCJFcnJvciIsIlNjaGVtZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxPQUFPQSxDQUFQLE1BQWMsUUFBZDtBQUNBLFNBQVNDLFVBQVQsUUFBMkIsY0FBM0I7QUFDQSxPQUFPQyxNQUFQO0FBUUEsT0FBTyxNQUFNQyxXQUFOLENBQWtCO0FBR3ZCQyxFQUFBQSxPQUFPLEdBQVk7QUFBRUMsSUFBQUEsS0FBSyxFQUFFLEVBQVQ7QUFBYUMsSUFBQUEsSUFBSSxFQUFFO0FBQW5CLEdBQVo7QUFFUEMsRUFBQUEsYUFBYSxHQUFlLFNBQWY7O0FBRWJDLEVBQUFBLFdBQVcsR0FBRztBQUNaQyxJQUFBQSxNQUFNLENBQUNDLE1BQVAsQ0FBYyxJQUFkLEVBQW9CUixNQUFwQjtBQUVBRCxJQUFBQSxVQUFVLENBQUNVLGlCQUFYLENBQTZCLE1BQU07QUFDakMsVUFBSSxLQUFLSixhQUFMLEtBQXVCLFNBQTNCLEVBQXNDO0FBQ3BDRSxRQUFBQSxNQUFNLENBQUNDLE1BQVAsQ0FDRSxJQURGLEVBRUUsS0FBS04sT0FBTCxDQUFhSCxVQUFVLENBQUNXLGNBQVgsTUFBK0IsT0FBNUMsQ0FGRjtBQUlEO0FBQ0YsS0FQRDtBQVFEO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7O0FBRUVDLEVBQUFBLFdBQVcsQ0FBQ1QsT0FBRCxFQUFtQjtBQUM1QixVQUFNVSxlQUFlLEdBQUdMLE1BQU0sQ0FBQ00sSUFBUCxDQUFZWCxPQUFPLENBQUNDLEtBQXBCLENBQXhCO0FBQ0EsVUFBTVcsY0FBYyxHQUFHUCxNQUFNLENBQUNNLElBQVAsQ0FBWVgsT0FBTyxDQUFDRSxJQUFwQixDQUF2Qjs7QUFFQSxVQUFNVyxXQUFXLEdBQUdqQixDQUFDLENBQUNrQixHQUFGLENBQU1KLGVBQU4sRUFBdUJFLGNBQXZCLENBQXBCOztBQUNBLFFBQUksQ0FBQ2hCLENBQUMsQ0FBQ21CLE9BQUYsQ0FBVUYsV0FBVixDQUFMLEVBQTZCO0FBQzNCRyxNQUFBQSxPQUFPLENBQUNDLEtBQVIsQ0FDRyx1Q0FBc0NKLFdBQVcsQ0FBQ0ssSUFBWixDQUFpQixJQUFqQixDQUF1QixFQURoRTtBQUdEOztBQUVELFNBQUtsQixPQUFMLEdBQWVBLE9BQWY7QUFDQSxVQUFNbUIsV0FBVyxHQUFHLEtBQUtDLFNBQUwsRUFBcEI7QUFDQWYsSUFBQUEsTUFBTSxDQUFDQyxNQUFQLENBQWMsSUFBZCxFQUFvQixLQUFLTixPQUFMLENBQWFtQixXQUFiLENBQXBCO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7OztBQUNFQyxFQUFBQSxTQUFTLEdBQXFCO0FBQzVCLFVBQU1DLE1BQU0sR0FDVixLQUFLbEIsYUFBTCxLQUF1QixTQUF2QixHQUNJTixVQUFVLENBQUNXLGNBQVgsRUFESixHQUVJLEtBQUtMLGFBSFg7QUFJQSxXQUFPa0IsTUFBTSxJQUFJLE9BQWpCO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBOzs7QUFDRUMsRUFBQUEsU0FBUyxDQUFDRCxNQUFELEVBQXFCO0FBQzVCLFFBQUksQ0FBQyxDQUFDLE9BQUQsRUFBVSxNQUFWLEVBQWtCLFNBQWxCLEVBQTZCRSxRQUE3QixDQUFzQ0YsTUFBdEMsQ0FBTCxFQUFvRDtBQUNsRCxZQUFNLElBQUlHLEtBQUosQ0FDSCxHQUFFSCxNQUFPLGtFQUROLENBQU47QUFHRDs7QUFDRCxTQUFLbEIsYUFBTCxHQUFxQmtCLE1BQXJCO0FBQ0EsVUFBTUYsV0FBVyxHQUFHLEtBQUtDLFNBQUwsRUFBcEI7QUFDQWYsSUFBQUEsTUFBTSxDQUFDQyxNQUFQLENBQWMsSUFBZCxFQUFvQixLQUFLTixPQUFMLENBQWFtQixXQUFiLENBQXBCO0FBQ0Q7O0FBbkVzQixDLENBcUV6Qjs7QUFDQSxNQUFNTSxNQUFNLEdBQUcxQixXQUFmO0FBQ0EsZUFBZTBCLE1BQWYiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvcHJlZmVyLWRlZmF1bHQtZXhwb3J0ICovXG5pbXBvcnQgXyBmcm9tIFwibG9kYXNoXCI7XG5pbXBvcnQgeyBBcHBlYXJhbmNlIH0gZnJvbSBcInJlYWN0LW5hdGl2ZVwiO1xuaW1wb3J0IENvbG9ycyBmcm9tIFwiLi9fY29sb3JcIjtcblxudHlwZSBTY2hlbWVzID0ge1xuICBsaWdodDogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfTtcbiAgZGFyazogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfTtcbn07XG50eXBlIFNjaGVtZVR5cGUgPSBcImRlZmF1bHRcIiB8IFwibGlnaHRcIiB8IFwiZGFya1wiO1xuXG5leHBvcnQgY2xhc3MgU2NoZW1hQ2xhc3Mge1xuICBba2V5OiBzdHJpbmddOiBhbnk7XG5cbiAgc2NoZW1lczogU2NoZW1lcyA9IHsgbGlnaHQ6IHt9LCBkYXJrOiB7fSB9O1xuXG4gIGN1cnJlbnRTY2hlbWU6IFNjaGVtZVR5cGUgPSBcImRlZmF1bHRcIjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIENvbG9ycyk7XG5cbiAgICBBcHBlYXJhbmNlLmFkZENoYW5nZUxpc3RlbmVyKCgpID0+IHtcbiAgICAgIGlmICh0aGlzLmN1cnJlbnRTY2hlbWUgPT09IFwiZGVmYXVsdFwiKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgdGhpcyxcbiAgICAgICAgICB0aGlzLnNjaGVtZXNbQXBwZWFyYW5jZS5nZXRDb2xvclNjaGVtZSgpID8/IFwibGlnaHRcIl1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2FkIHNldCBvZiBzY2hlbWVzIGZvciBsaWdodC9kYXJrIG1vZGVcbiAgICogYXJndW1lbnRzOlxuICAgKiBzY2hlbWVzIC0gdHdvIHNldHMgb2YgbWFwIG9mIGNvbG9ycyBlLmcge2xpZ2h0OiB7c2NyZWVuOiAnd2hpdGUnfSwgZGFyazoge3NjcmVlbjogJ2JsYWNrJ319XG4gICAqL1xuXG4gIGxvYWRTY2hlbWVzKHNjaGVtZXM6IFNjaGVtZXMpIHtcbiAgICBjb25zdCBsaWdodFNjaGVtZUtleXMgPSBPYmplY3Qua2V5cyhzY2hlbWVzLmxpZ2h0KTtcbiAgICBjb25zdCBkYXJrU2NoZW1lS2V5cyA9IE9iamVjdC5rZXlzKHNjaGVtZXMuZGFyayk7XG5cbiAgICBjb25zdCBtaXNzaW5nS2V5cyA9IF8ueG9yKGxpZ2h0U2NoZW1lS2V5cywgZGFya1NjaGVtZUtleXMpO1xuICAgIGlmICghXy5pc0VtcHR5KG1pc3NpbmdLZXlzKSkge1xuICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgYFRoZXJlIGlzIGEgbWlzbWF0Y2ggaW4gc2NoZW1lIGtleXM6ICR7bWlzc2luZ0tleXMuam9pbihcIiwgXCIpfWBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgdGhpcy5zY2hlbWVzID0gc2NoZW1lcztcbiAgICBjb25zdCBjb2xvclNjaGVtZSA9IHRoaXMuZ2V0U2NoZW1lKCk7XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCB0aGlzLnNjaGVtZXNbY29sb3JTY2hlbWVdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYXBwJ3MgY3VycmVudCBjb2xvciBzY2hlbWVcbiAgICovXG4gIGdldFNjaGVtZSgpOiBcImxpZ2h0XCIgfCBcImRhcmtcIiB7XG4gICAgY29uc3Qgc2NoZW1lID1cbiAgICAgIHRoaXMuY3VycmVudFNjaGVtZSA9PT0gXCJkZWZhdWx0XCJcbiAgICAgICAgPyBBcHBlYXJhbmNlLmdldENvbG9yU2NoZW1lKClcbiAgICAgICAgOiB0aGlzLmN1cnJlbnRTY2hlbWU7XG4gICAgcmV0dXJuIHNjaGVtZSA/PyBcImxpZ2h0XCI7XG4gIH1cblxuICAvKipcbiAgICogU2V0IGNvbG9yIHNjaGVtZSBmb3IgYXBwXG4gICAqIGFyZ3VtZW50czpcbiAgICogc2NoZW1lIC0gY29sb3Igc2NoZW1lIGUuZyBsaWdodC9kYXJrL2RlZmF1bHRcbiAgICovXG4gIHNldFNjaGVtZShzY2hlbWU6IFNjaGVtZVR5cGUpIHtcbiAgICBpZiAoIVtcImxpZ2h0XCIsIFwiZGFya1wiLCBcImRlZmF1bHRcIl0uaW5jbHVkZXMoc2NoZW1lKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgJHtzY2hlbWV9IGlzIGludmFsaWQgY29sb3JTY2hlbWUsIHBsZWFzZSB1c2UgJ2xpZ2h0JyB8ICdkYXJrJyB8ICdkZWZhdWx0J2BcbiAgICAgICk7XG4gICAgfVxuICAgIHRoaXMuY3VycmVudFNjaGVtZSA9IHNjaGVtZTtcbiAgICBjb25zdCBjb2xvclNjaGVtZSA9IHRoaXMuZ2V0U2NoZW1lKCk7XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCB0aGlzLnNjaGVtZXNbY29sb3JTY2hlbWVdKTtcbiAgfVxufVxuLy9AdHMtaWdub3JlXG5jb25zdCBTY2hlbWUgPSBTY2hlbWFDbGFzcyBhcyBFeHRlbmRUeXBlV2l0aDx0eXBlb2YgQ29sb3JzPjtcbmV4cG9ydCBkZWZhdWx0IFNjaGVtZTtcbiJdfQ==
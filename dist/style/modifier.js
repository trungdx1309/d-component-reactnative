/* eslint-disable import/prefer-default-export */
import { isEmpty, isArray } from "lodash";
import Colors from "./constant/AppColors";
export const generateStyleValue = (variants, values, defaultValues) => {
  const res = {};

  if (!isEmpty(variants) && !isEmpty(values)) {
    try {
      Object.keys(variants).forEach(variant => {
        Object.keys(values).forEach(valueKey => {
          let className;

          if (valueKey) {
            className = `${variant}-${valueKey}`;
          } else {
            className = `${variant}`;
          }

          const att = variants?.[variant];
          const value = values?.[valueKey];
          let obj = {};

          if (isArray(att)) {
            att.forEach(i => {
              obj[i] = value;
            });
          } else {
            obj[att] = value;
          }

          if (defaultValues) {
            obj = { ...obj,
              ...defaultValues
            };
          }

          res[className] = obj;
        });
      });
    } catch (error) {
      console.error("Generate style value errors", {
        error
      });
    }
  }

  return res;
};
export const getColorValue = color => {
  let value = color; //@ts-ignore

  if (Colors[color]) {
    //@ts-ignore
    value = Colors[color];
  }

  return value;
};
export default {
  generateStyleValue
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHlsZS9tb2RpZmllci50cyJdLCJuYW1lcyI6WyJpc0VtcHR5IiwiaXNBcnJheSIsIkNvbG9ycyIsImdlbmVyYXRlU3R5bGVWYWx1ZSIsInZhcmlhbnRzIiwidmFsdWVzIiwiZGVmYXVsdFZhbHVlcyIsInJlcyIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwidmFyaWFudCIsInZhbHVlS2V5IiwiY2xhc3NOYW1lIiwiYXR0IiwidmFsdWUiLCJvYmoiLCJpIiwiZXJyb3IiLCJjb25zb2xlIiwiZ2V0Q29sb3JWYWx1ZSIsImNvbG9yIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUVBLFNBQVNBLE9BQVQsRUFBa0JDLE9BQWxCLFFBQWlDLFFBQWpDO0FBQ0EsT0FBT0MsTUFBUDtBQUVBLE9BQU8sTUFBTUMsa0JBQWtCLEdBQUcsQ0FDaENDLFFBRGdDLEVBRWhDQyxNQUZnQyxFQUdoQ0MsYUFIZ0MsS0FJeEI7QUFDUixRQUFNQyxHQUFRLEdBQUcsRUFBakI7O0FBQ0EsTUFBSSxDQUFDUCxPQUFPLENBQUNJLFFBQUQsQ0FBUixJQUFzQixDQUFDSixPQUFPLENBQUNLLE1BQUQsQ0FBbEMsRUFBNEM7QUFDMUMsUUFBSTtBQUNGRyxNQUFBQSxNQUFNLENBQUNDLElBQVAsQ0FBWUwsUUFBWixFQUFzQk0sT0FBdEIsQ0FBK0JDLE9BQUQsSUFBYTtBQUN6Q0gsUUFBQUEsTUFBTSxDQUFDQyxJQUFQLENBQVlKLE1BQVosRUFBb0JLLE9BQXBCLENBQTZCRSxRQUFELElBQWM7QUFDeEMsY0FBSUMsU0FBSjs7QUFDQSxjQUFJRCxRQUFKLEVBQWM7QUFDWkMsWUFBQUEsU0FBUyxHQUFJLEdBQUVGLE9BQVEsSUFBR0MsUUFBUyxFQUFuQztBQUNELFdBRkQsTUFFTztBQUNMQyxZQUFBQSxTQUFTLEdBQUksR0FBRUYsT0FBUSxFQUF2QjtBQUNEOztBQUNELGdCQUFNRyxHQUFHLEdBQUdWLFFBQVEsR0FBR08sT0FBSCxDQUFwQjtBQUNBLGdCQUFNSSxLQUFLLEdBQUdWLE1BQU0sR0FBR08sUUFBSCxDQUFwQjtBQUNBLGNBQUlJLEdBQVEsR0FBRyxFQUFmOztBQUNBLGNBQUlmLE9BQU8sQ0FBQ2EsR0FBRCxDQUFYLEVBQWtCO0FBQ2hCQSxZQUFBQSxHQUFHLENBQUNKLE9BQUosQ0FBYU8sQ0FBRCxJQUFPO0FBQ2pCRCxjQUFBQSxHQUFHLENBQUNDLENBQUQsQ0FBSCxHQUFTRixLQUFUO0FBQ0QsYUFGRDtBQUdELFdBSkQsTUFJTztBQUNMQyxZQUFBQSxHQUFHLENBQUNGLEdBQUQsQ0FBSCxHQUFXQyxLQUFYO0FBQ0Q7O0FBQ0QsY0FBSVQsYUFBSixFQUFtQjtBQUNqQlUsWUFBQUEsR0FBRyxHQUFHLEVBQUUsR0FBR0EsR0FBTDtBQUFVLGlCQUFHVjtBQUFiLGFBQU47QUFDRDs7QUFDREMsVUFBQUEsR0FBRyxDQUFDTSxTQUFELENBQUgsR0FBaUJHLEdBQWpCO0FBQ0QsU0FyQkQ7QUFzQkQsT0F2QkQ7QUF3QkQsS0F6QkQsQ0F5QkUsT0FBT0UsS0FBUCxFQUFjO0FBQ2RDLE1BQUFBLE9BQU8sQ0FBQ0QsS0FBUixDQUFjLDZCQUFkLEVBQTZDO0FBQUVBLFFBQUFBO0FBQUYsT0FBN0M7QUFDRDtBQUNGOztBQUNELFNBQU9YLEdBQVA7QUFDRCxDQXJDTTtBQXVDUCxPQUFPLE1BQU1hLGFBQWEsR0FBSUMsS0FBRCxJQUFtQjtBQUM5QyxNQUFJTixLQUFVLEdBQUdNLEtBQWpCLENBRDhDLENBRTlDOztBQUNBLE1BQUluQixNQUFNLENBQUNtQixLQUFELENBQVYsRUFBbUI7QUFDakI7QUFDQU4sSUFBQUEsS0FBSyxHQUFHYixNQUFNLENBQUNtQixLQUFELENBQWQ7QUFDRDs7QUFDRCxTQUFPTixLQUFQO0FBQ0QsQ0FSTTtBQVVQLGVBQWU7QUFDYlosRUFBQUE7QUFEYSxDQUFmIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L3ByZWZlci1kZWZhdWx0LWV4cG9ydCAqL1xuXG5pbXBvcnQgeyBpc0VtcHR5LCBpc0FycmF5IH0gZnJvbSBcImxvZGFzaFwiO1xuaW1wb3J0IENvbG9ycyBmcm9tIFwiLi9jb25zdGFudC9BcHBDb2xvcnNcIjtcblxuZXhwb3J0IGNvbnN0IGdlbmVyYXRlU3R5bGVWYWx1ZSA9IChcbiAgdmFyaWFudHM6IGFueSxcbiAgdmFsdWVzOiBhbnksXG4gIGRlZmF1bHRWYWx1ZXM/OiBhbnlcbik6IGFueSA9PiB7XG4gIGNvbnN0IHJlczogYW55ID0ge307XG4gIGlmICghaXNFbXB0eSh2YXJpYW50cykgJiYgIWlzRW1wdHkodmFsdWVzKSkge1xuICAgIHRyeSB7XG4gICAgICBPYmplY3Qua2V5cyh2YXJpYW50cykuZm9yRWFjaCgodmFyaWFudCkgPT4ge1xuICAgICAgICBPYmplY3Qua2V5cyh2YWx1ZXMpLmZvckVhY2goKHZhbHVlS2V5KSA9PiB7XG4gICAgICAgICAgbGV0IGNsYXNzTmFtZTtcbiAgICAgICAgICBpZiAodmFsdWVLZXkpIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZSA9IGAke3ZhcmlhbnR9LSR7dmFsdWVLZXl9YDtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2xhc3NOYW1lID0gYCR7dmFyaWFudH1gO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCBhdHQgPSB2YXJpYW50cz8uW3ZhcmlhbnQgYXMgYW55XTtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IHZhbHVlcz8uW3ZhbHVlS2V5IGFzIGFueV07XG4gICAgICAgICAgbGV0IG9iajogYW55ID0ge307XG4gICAgICAgICAgaWYgKGlzQXJyYXkoYXR0KSkge1xuICAgICAgICAgICAgYXR0LmZvckVhY2goKGkpID0+IHtcbiAgICAgICAgICAgICAgb2JqW2ldID0gdmFsdWU7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2JqW2F0dF0gPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGRlZmF1bHRWYWx1ZXMpIHtcbiAgICAgICAgICAgIG9iaiA9IHsgLi4ub2JqLCAuLi5kZWZhdWx0VmFsdWVzIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc1tjbGFzc05hbWVdID0gb2JqO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiR2VuZXJhdGUgc3R5bGUgdmFsdWUgZXJyb3JzXCIsIHsgZXJyb3IgfSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXM7XG59O1xuXG5leHBvcnQgY29uc3QgZ2V0Q29sb3JWYWx1ZSA9IChjb2xvcjogc3RyaW5nKSA9PiB7XG4gIGxldCB2YWx1ZTogYW55ID0gY29sb3I7XG4gIC8vQHRzLWlnbm9yZVxuICBpZiAoQ29sb3JzW2NvbG9yXSkge1xuICAgIC8vQHRzLWlnbm9yZVxuICAgIHZhbHVlID0gQ29sb3JzW2NvbG9yXSBhcyBhbnk7XG4gIH1cbiAgcmV0dXJuIHZhbHVlO1xufTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICBnZW5lcmF0ZVN0eWxlVmFsdWUsXG59O1xuIl19
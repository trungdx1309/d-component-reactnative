import _pt from "prop-types";
import ClassNames from "classnames";
import React from "react";
import Icon from "../icon/Icon";
import Text from "../text/Text";
import TouchableOpacity from "../view/TouchableOpacity";
import View from "../view/View";

const CheckBox = ({
  className,
  classNameLabel,
  classNameBox,
  checked,
  label,
  onChange
}) => {
  const wrapperClass = ClassNames("flex-row", className);
  const boxClass = ClassNames("width-14 height-14 border border-grey", {
    "bg-primary": checked
  }, classNameBox);
  const labelClass = ClassNames("h4 ml-2", classNameLabel);
  let labelContent;

  if (typeof label === "string") {
    labelContent = <Text className={labelClass} style={{
      overflow: "hidden"
    }}>
        {label}
      </Text>;
  }

  if (React.isValidElement(label)) {
    labelContent = label;
  }

  return <View className={wrapperClass}>
      <TouchableOpacity className={boxClass} onPress={onChange}>
        {checked && <Icon name="done" color="light" size={14} />}
      </TouchableOpacity>
      {label && labelContent}
    </View>;
};

CheckBox.propTypes = {
  checked: _pt.bool,
  label: _pt.any,
  onChange: _pt.func,
  classNameLabel: _pt.string,
  classNameBox: _pt.string
};
export default CheckBox;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnQvY2hlY2tib3gvQ2hlY2tCb3gudHN4Il0sIm5hbWVzIjpbIkNsYXNzTmFtZXMiLCJSZWFjdCIsIkljb24iLCJUZXh0IiwiVG91Y2hhYmxlT3BhY2l0eSIsIlZpZXciLCJDaGVja0JveCIsImNsYXNzTmFtZSIsImNsYXNzTmFtZUxhYmVsIiwiY2xhc3NOYW1lQm94IiwiY2hlY2tlZCIsImxhYmVsIiwib25DaGFuZ2UiLCJ3cmFwcGVyQ2xhc3MiLCJib3hDbGFzcyIsImxhYmVsQ2xhc3MiLCJsYWJlbENvbnRlbnQiLCJvdmVyZmxvdyIsImlzVmFsaWRFbGVtZW50Il0sIm1hcHBpbmdzIjoiO0FBQUEsT0FBT0EsVUFBUCxNQUF1QixZQUF2QjtBQUNBLE9BQU9DLEtBQVAsTUFBa0IsT0FBbEI7QUFDQSxPQUFPQyxJQUFQO0FBQ0EsT0FBT0MsSUFBUDtBQUNBLE9BQU9DLGdCQUFQO0FBQ0EsT0FBT0MsSUFBUDs7QUFVQSxNQUFNQyxRQUFrQyxHQUFHLENBQUM7QUFDMUNDLEVBQUFBLFNBRDBDO0FBRTFDQyxFQUFBQSxjQUYwQztBQUcxQ0MsRUFBQUEsWUFIMEM7QUFJMUNDLEVBQUFBLE9BSjBDO0FBSzFDQyxFQUFBQSxLQUwwQztBQU0xQ0MsRUFBQUE7QUFOMEMsQ0FBRCxLQU9yQztBQUNKLFFBQU1DLFlBQVksR0FBR2IsVUFBVSxDQUFDLFVBQUQsRUFBYU8sU0FBYixDQUEvQjtBQUNBLFFBQU1PLFFBQVEsR0FBR2QsVUFBVSxDQUN6Qix1Q0FEeUIsRUFFekI7QUFDRSxrQkFBY1U7QUFEaEIsR0FGeUIsRUFLekJELFlBTHlCLENBQTNCO0FBT0EsUUFBTU0sVUFBVSxHQUFHZixVQUFVLENBQUMsU0FBRCxFQUFZUSxjQUFaLENBQTdCO0FBQ0EsTUFBSVEsWUFBSjs7QUFDQSxNQUFJLE9BQU9MLEtBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDN0JLLElBQUFBLFlBQVksR0FDVixDQUFDLElBQUQsQ0FBTSxVQUFVLENBQUNELFVBQUQsQ0FBaEIsQ0FBNkIsTUFBTSxDQUFDO0FBQUVFLE1BQUFBLFFBQVEsRUFBRTtBQUFaLEtBQUQsQ0FBbkM7QUFDTixRQUFRLENBQUNOLEtBQUQ7QUFDUixNQUFNLEVBQUUsSUFBRixDQUhGO0FBS0Q7O0FBQ0QsTUFBSVYsS0FBSyxDQUFDaUIsY0FBTixDQUFxQlAsS0FBckIsQ0FBSixFQUFpQztBQUMvQkssSUFBQUEsWUFBWSxHQUFHTCxLQUFmO0FBQ0Q7O0FBRUQsU0FDRSxDQUFDLElBQUQsQ0FBTSxVQUFVLENBQUNFLFlBQUQsQ0FBaEI7QUFDSixNQUFNLENBQUMsZ0JBQUQsQ0FBa0IsVUFBVSxDQUFDQyxRQUFELENBQTVCLENBQXVDLFFBQVEsQ0FBQ0YsUUFBRCxDQUEvQztBQUNOLFFBQVEsQ0FBQ0YsT0FBTyxJQUFJLENBQUMsSUFBRCxDQUFNLEtBQUssTUFBWCxDQUFrQixNQUFNLE9BQXhCLENBQWdDLEtBQUssQ0FBQyxFQUFELENBQXJDLEdBQVo7QUFDUixNQUFNLEVBQUUsZ0JBQUY7QUFDTixNQUFNLENBQUNDLEtBQUssSUFBSUssWUFBVjtBQUNOLElBQUksRUFBRSxJQUFGLENBTkY7QUFRRCxDQXJDRDs7O0FBUEVOLEVBQUFBLE87QUFDQUMsRUFBQUEsSztBQUNBQyxFQUFBQSxRO0FBQ0FKLEVBQUFBLGM7QUFDQUMsRUFBQUEsWTs7QUEwQ0YsZUFBZUgsUUFBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDbGFzc05hbWVzIGZyb20gXCJjbGFzc25hbWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgSWNvbiBmcm9tIFwiLi4vaWNvbi9JY29uXCI7XG5pbXBvcnQgVGV4dCBmcm9tIFwiLi4vdGV4dC9UZXh0XCI7XG5pbXBvcnQgVG91Y2hhYmxlT3BhY2l0eSBmcm9tIFwiLi4vdmlldy9Ub3VjaGFibGVPcGFjaXR5XCI7XG5pbXBvcnQgVmlldywgeyBJVmlld1Byb3BzIH0gZnJvbSBcIi4uL3ZpZXcvVmlld1wiO1xuXG5leHBvcnQgaW50ZXJmYWNlIElDaGVja0JveFByb3BzIGV4dGVuZHMgSVZpZXdQcm9wcyB7XG4gIGNoZWNrZWQ/OiBib29sZWFuO1xuICBsYWJlbD86IGFueTtcbiAgb25DaGFuZ2U/OiAocHJvcHM/OiBhbnkpID0+IGFueTtcbiAgY2xhc3NOYW1lTGFiZWw/OiBzdHJpbmc7XG4gIGNsYXNzTmFtZUJveD86IHN0cmluZztcbn1cblxuY29uc3QgQ2hlY2tCb3g6IFJlYWN0LkZDPElDaGVja0JveFByb3BzPiA9ICh7XG4gIGNsYXNzTmFtZSxcbiAgY2xhc3NOYW1lTGFiZWwsXG4gIGNsYXNzTmFtZUJveCxcbiAgY2hlY2tlZCxcbiAgbGFiZWwsXG4gIG9uQ2hhbmdlLFxufSkgPT4ge1xuICBjb25zdCB3cmFwcGVyQ2xhc3MgPSBDbGFzc05hbWVzKFwiZmxleC1yb3dcIiwgY2xhc3NOYW1lKTtcbiAgY29uc3QgYm94Q2xhc3MgPSBDbGFzc05hbWVzKFxuICAgIFwid2lkdGgtMTQgaGVpZ2h0LTE0IGJvcmRlciBib3JkZXItZ3JleVwiLFxuICAgIHtcbiAgICAgIFwiYmctcHJpbWFyeVwiOiBjaGVja2VkLFxuICAgIH0sXG4gICAgY2xhc3NOYW1lQm94XG4gICk7XG4gIGNvbnN0IGxhYmVsQ2xhc3MgPSBDbGFzc05hbWVzKFwiaDQgbWwtMlwiLCBjbGFzc05hbWVMYWJlbCk7XG4gIGxldCBsYWJlbENvbnRlbnQ7XG4gIGlmICh0eXBlb2YgbGFiZWwgPT09IFwic3RyaW5nXCIpIHtcbiAgICBsYWJlbENvbnRlbnQgPSAoXG4gICAgICA8VGV4dCBjbGFzc05hbWU9e2xhYmVsQ2xhc3N9IHN0eWxlPXt7IG92ZXJmbG93OiBcImhpZGRlblwiIH19PlxuICAgICAgICB7bGFiZWx9XG4gICAgICA8L1RleHQ+XG4gICAgKTtcbiAgfVxuICBpZiAoUmVhY3QuaXNWYWxpZEVsZW1lbnQobGFiZWwpKSB7XG4gICAgbGFiZWxDb250ZW50ID0gbGFiZWw7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxWaWV3IGNsYXNzTmFtZT17d3JhcHBlckNsYXNzfT5cbiAgICAgIDxUb3VjaGFibGVPcGFjaXR5IGNsYXNzTmFtZT17Ym94Q2xhc3N9IG9uUHJlc3M9e29uQ2hhbmdlfT5cbiAgICAgICAge2NoZWNrZWQgJiYgPEljb24gbmFtZT1cImRvbmVcIiBjb2xvcj1cImxpZ2h0XCIgc2l6ZT17MTR9IC8+fVxuICAgICAgPC9Ub3VjaGFibGVPcGFjaXR5PlxuICAgICAge2xhYmVsICYmIGxhYmVsQ29udGVudH1cbiAgICA8L1ZpZXc+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBDaGVja0JveDtcbiJdfQ==
import _pt from "prop-types";
import ClassNames from "classnames";
import React from "react";
import { isDark } from "../../style/color/_color";
import { getColorValue } from "../../style/modifier";
import Icon from "../icon/Icon";
import Text from "../text/Text";
import TouchableOpacity from "../view/TouchableOpacity";

const Button = ({
  className,
  classNameLabel,
  color = "primary",
  variant = "standard",
  size = "large",
  shape = "square",
  children,
  iconName,
  iconSize = 14,
  suffixIcon,
  suffixElement,
  prefixElement,
  label,
  disabled,
  ...rest
}) => {
  const buttonColor = getColorValue(color);
  const isIconButton = !!iconName || !!suffixIcon || suffixElement || prefixElement;
  const wrapperClass = ClassNames("flex-center-y justify-content-center px-3", {
    [`bg-${color}`]: variant === "standard",
    [`border border-${color}`]: variant === "outline",
    "rounded-pill": shape === "pill",
    "rounded-2": shape === "rounded",
    "bg-disabled": disabled
  }, className);
  const labelClass = ClassNames("text-center", {
    [`text-${color}`]: variant === "outline" || variant === "trans",
    "text-white": variant === "standard" && isDark(buttonColor)
  }, classNameLabel);

  const getIconColor = () => {
    if (variant === "standard" && isDark(buttonColor)) {
      return "light";
    }

    if (variant === "standard" && !isDark(buttonColor)) {
      return "dark";
    }

    return buttonColor;
  };

  let mainView;
  let content = children;
  let suffixView;
  let prefixView;

  if (label) {
    content = label;
  }

  if (typeof content === "string") {
    mainView = <Text className={labelClass}>{content}</Text>;
  }

  if (React.isValidElement(content)) {
    mainView = content;
  }

  if (iconName) {
    prefixView = <Icon name={iconName} color={getIconColor()} size={iconSize} className="mr-2" />;
  }

  return <TouchableOpacity className={wrapperClass} style={{
    height: 40
  }} disabled={disabled} {...rest}>
      {prefixView}
      {mainView}
      {suffixView}
    </TouchableOpacity>;
};

Button.propTypes = {
  className: _pt.string,
  classNameLabel: _pt.string,
  children: _pt.any,
  size: _pt.oneOf(["large", "medium", "small", "x-small", "auto", "fit-content"]),
  variant: _pt.oneOf(["standard", "outline", "trans"]),
  shape: _pt.oneOf(["square", "pill", "rounded"]),
  color: _pt.oneOf(["primary", "secondary", "green", "red", "yellow", "blue", "gray", "dark", "light", "error", "success", "warning", "muted"]),
  iconName: _pt.string,
  iconSize: _pt.number,
  suffixIcon: _pt.string,
  suffixElement: _pt.any,
  prefixElement: _pt.any,
  label: _pt.string
};
export default Button;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jb21wb25lbnQvYnV0dG9uL0J1dHRvbi50c3giXSwibmFtZXMiOlsiQ2xhc3NOYW1lcyIsIlJlYWN0IiwiaXNEYXJrIiwiZ2V0Q29sb3JWYWx1ZSIsIkljb24iLCJUZXh0IiwiVG91Y2hhYmxlT3BhY2l0eSIsIkJ1dHRvbiIsImNsYXNzTmFtZSIsImNsYXNzTmFtZUxhYmVsIiwiY29sb3IiLCJ2YXJpYW50Iiwic2l6ZSIsInNoYXBlIiwiY2hpbGRyZW4iLCJpY29uTmFtZSIsImljb25TaXplIiwic3VmZml4SWNvbiIsInN1ZmZpeEVsZW1lbnQiLCJwcmVmaXhFbGVtZW50IiwibGFiZWwiLCJkaXNhYmxlZCIsInJlc3QiLCJidXR0b25Db2xvciIsImlzSWNvbkJ1dHRvbiIsIndyYXBwZXJDbGFzcyIsImxhYmVsQ2xhc3MiLCJnZXRJY29uQ29sb3IiLCJtYWluVmlldyIsImNvbnRlbnQiLCJzdWZmaXhWaWV3IiwicHJlZml4VmlldyIsImlzVmFsaWRFbGVtZW50IiwiaGVpZ2h0Il0sIm1hcHBpbmdzIjoiO0FBQUEsT0FBT0EsVUFBUCxNQUF1QixZQUF2QjtBQUNBLE9BQU9DLEtBQVAsTUFBa0IsT0FBbEI7QUFFQSxTQUFTQyxNQUFUO0FBQ0EsU0FBU0MsYUFBVDtBQUNBLE9BQU9DLElBQVA7QUFDQSxPQUFPQyxJQUFQO0FBQ0EsT0FBT0MsZ0JBQVA7O0FBK0JBLE1BQU1DLE1BQThCLEdBQUcsQ0FBQztBQUN0Q0MsRUFBQUEsU0FEc0M7QUFFdENDLEVBQUFBLGNBRnNDO0FBR3RDQyxFQUFBQSxLQUFLLEdBQUcsU0FIOEI7QUFJdENDLEVBQUFBLE9BQU8sR0FBRyxVQUo0QjtBQUt0Q0MsRUFBQUEsSUFBSSxHQUFHLE9BTCtCO0FBTXRDQyxFQUFBQSxLQUFLLEdBQUcsUUFOOEI7QUFPdENDLEVBQUFBLFFBUHNDO0FBUXRDQyxFQUFBQSxRQVJzQztBQVN0Q0MsRUFBQUEsUUFBUSxHQUFHLEVBVDJCO0FBVXRDQyxFQUFBQSxVQVZzQztBQVd0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LGFBQVUsVSxFQUFhLFMsRUFBWSxPO0FBQ25DRSxFQUFBQSxLLGFBQVEsUSxFQUFXLE0sRUFBUyxTO0FBQzVCSCxFQUFBQSxLLGFBQ0ksUyxFQUNBLFcsRUFDQSxPLEVBQ0EsSyxFQUNBLFEsRUFDQSxNLEVBQ0EsTSxFQUNBLE0sRUFDQSxPLEVBQ0EsTyxFQUNBLFMsRUFDQSxTLEVBQ0EsTztBQUNKSyxFQUFBQSxRO0FBQ0FDLEVBQUFBLFE7QUFDQUMsRUFBQUEsVTtBQUNBQyxFQUFBQSxhO0FBQ0FDLEVBQUFBLGE7QUFDQUMsRUFBQUEsSzs7QUFnR0YsZUFBZWIsTUFBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDbGFzc05hbWVzIGZyb20gXCJjbGFzc25hbWVzXCI7XG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBUb3VjaGFibGVPcGFjaXR5UHJvcHMgfSBmcm9tIFwicmVhY3QtbmF0aXZlXCI7XG5pbXBvcnQgeyBpc0RhcmsgfSBmcm9tIFwiLi4vLi4vc3R5bGUvY29sb3IvX2NvbG9yXCI7XG5pbXBvcnQgeyBnZXRDb2xvclZhbHVlIH0gZnJvbSBcIi4uLy4uL3N0eWxlL21vZGlmaWVyXCI7XG5pbXBvcnQgSWNvbiBmcm9tIFwiLi4vaWNvbi9JY29uXCI7XG5pbXBvcnQgVGV4dCBmcm9tIFwiLi4vdGV4dC9UZXh0XCI7XG5pbXBvcnQgVG91Y2hhYmxlT3BhY2l0eSBmcm9tIFwiLi4vdmlldy9Ub3VjaGFibGVPcGFjaXR5XCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUJ1dHRvblByb3BzIGV4dGVuZHMgVG91Y2hhYmxlT3BhY2l0eVByb3BzIHtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBjbGFzc05hbWVMYWJlbD86IHN0cmluZztcbiAgY2hpbGRyZW4/OiBhbnk7XG4gIHNpemU/OiBcImxhcmdlXCIgfCBcIm1lZGl1bVwiIHwgXCJzbWFsbFwiIHwgXCJ4LXNtYWxsXCIgfCBcImF1dG9cIiB8IFwiZml0LWNvbnRlbnRcIjtcbiAgdmFyaWFudD86IFwic3RhbmRhcmRcIiB8IFwib3V0bGluZVwiIHwgXCJ0cmFuc1wiO1xuICBzaGFwZT86IFwic3F1YXJlXCIgfCBcInBpbGxcIiB8IFwicm91bmRlZFwiO1xuICBjb2xvcj86XG4gICAgfCBcInByaW1hcnlcIlxuICAgIHwgXCJzZWNvbmRhcnlcIlxuICAgIHwgXCJncmVlblwiXG4gICAgfCBcInJlZFwiXG4gICAgfCBcInllbGxvd1wiXG4gICAgfCBcImJsdWVcIlxuICAgIHwgXCJncmF5XCJcbiAgICB8IFwiZGFya1wiXG4gICAgfCBcImxpZ2h0XCJcbiAgICB8IFwiZXJyb3JcIlxuICAgIHwgXCJzdWNjZXNzXCJcbiAgICB8IFwid2FybmluZ1wiXG4gICAgfCBcIm11dGVkXCI7XG4gIGljb25OYW1lPzogc3RyaW5nO1xuICBpY29uU2l6ZT86IG51bWJlcjtcbiAgc3VmZml4SWNvbj86IHN0cmluZztcbiAgc3VmZml4RWxlbWVudD86IGFueTtcbiAgcHJlZml4RWxlbWVudD86IGFueTtcbiAgbGFiZWw/OiBzdHJpbmc7XG59XG5cbmNvbnN0IEJ1dHRvbjogUmVhY3QuRkM8SUJ1dHRvblByb3BzPiA9ICh7XG4gIGNsYXNzTmFtZSxcbiAgY2xhc3NOYW1lTGFiZWwsXG4gIGNvbG9yID0gXCJwcmltYXJ5XCIsXG4gIHZhcmlhbnQgPSBcInN0YW5kYXJkXCIsXG4gIHNpemUgPSBcImxhcmdlXCIsXG4gIHNoYXBlID0gXCJzcXVhcmVcIixcbiAgY2hpbGRyZW4sXG4gIGljb25OYW1lLFxuICBpY29uU2l6ZSA9IDE0LFxuICBzdWZmaXhJY29uLFxuICBzdWZmaXhFbGVtZW50LFxuICBwcmVmaXhFbGVtZW50LFxuICBsYWJlbCxcbiAgZGlzYWJsZWQsXG4gIC4uLnJlc3Rcbn0pID0+IHtcbiAgY29uc3QgYnV0dG9uQ29sb3IgPSBnZXRDb2xvclZhbHVlKGNvbG9yKTtcbiAgY29uc3QgaXNJY29uQnV0dG9uID1cbiAgICAhIWljb25OYW1lIHx8ICEhc3VmZml4SWNvbiB8fCBzdWZmaXhFbGVtZW50IHx8IHByZWZpeEVsZW1lbnQ7XG5cbiAgY29uc3Qgd3JhcHBlckNsYXNzID0gQ2xhc3NOYW1lcyhcbiAgICBcImZsZXgtY2VudGVyLXkganVzdGlmeS1jb250ZW50LWNlbnRlciBweC0zXCIsXG4gICAge1xuICAgICAgW2BiZy0ke2NvbG9yfWBdOiB2YXJpYW50ID09PSBcInN0YW5kYXJkXCIsXG4gICAgICBbYGJvcmRlciBib3JkZXItJHtjb2xvcn1gXTogdmFyaWFudCA9PT0gXCJvdXRsaW5lXCIsXG4gICAgICBcInJvdW5kZWQtcGlsbFwiOiBzaGFwZSA9PT0gXCJwaWxsXCIsXG4gICAgICBcInJvdW5kZWQtMlwiOiBzaGFwZSA9PT0gXCJyb3VuZGVkXCIsXG4gICAgICBcImJnLWRpc2FibGVkXCI6IGRpc2FibGVkLFxuICAgIH0sXG4gICAgY2xhc3NOYW1lXG4gICk7XG4gIGNvbnN0IGxhYmVsQ2xhc3MgPSBDbGFzc05hbWVzKFxuICAgIFwidGV4dC1jZW50ZXJcIixcbiAgICB7XG4gICAgICBbYHRleHQtJHtjb2xvcn1gXTogdmFyaWFudCA9PT0gXCJvdXRsaW5lXCIgfHwgdmFyaWFudCA9PT0gXCJ0cmFuc1wiLFxuICAgICAgXCJ0ZXh0LXdoaXRlXCI6IHZhcmlhbnQgPT09IFwic3RhbmRhcmRcIiAmJiBpc0RhcmsoYnV0dG9uQ29sb3IpLFxuICAgIH0sXG4gICAgY2xhc3NOYW1lTGFiZWxcbiAgKTtcblxuICBjb25zdCBnZXRJY29uQ29sb3IgPSAoKSA9PiB7XG4gICAgaWYgKHZhcmlhbnQgPT09IFwic3RhbmRhcmRcIiAmJiBpc0RhcmsoYnV0dG9uQ29sb3IpKSB7XG4gICAgICByZXR1cm4gXCJsaWdodFwiO1xuICAgIH1cbiAgICBpZiAodmFyaWFudCA9PT0gXCJzdGFuZGFyZFwiICYmICFpc0RhcmsoYnV0dG9uQ29sb3IpKSB7XG4gICAgICByZXR1cm4gXCJkYXJrXCI7XG4gICAgfVxuICAgIHJldHVybiBidXR0b25Db2xvcjtcbiAgfTtcblxuICBsZXQgbWFpblZpZXc7XG4gIGxldCBjb250ZW50ID0gY2hpbGRyZW47XG4gIGxldCBzdWZmaXhWaWV3O1xuICBsZXQgcHJlZml4VmlldztcblxuICBpZiAobGFiZWwpIHtcbiAgICBjb250ZW50ID0gbGFiZWw7XG4gIH1cblxuICBpZiAodHlwZW9mIGNvbnRlbnQgPT09IFwic3RyaW5nXCIpIHtcbiAgICBtYWluVmlldyA9IDxUZXh0IGNsYXNzTmFtZT17bGFiZWxDbGFzc30+e2NvbnRlbnR9PC9UZXh0PjtcbiAgfVxuXG4gIGlmIChSZWFjdC5pc1ZhbGlkRWxlbWVudChjb250ZW50KSkge1xuICAgIG1haW5WaWV3ID0gY29udGVudDtcbiAgfVxuXG4gIGlmIChpY29uTmFtZSkge1xuICAgIHByZWZpeFZpZXcgPSAoXG4gICAgICA8SWNvblxuICAgICAgICBuYW1lPXtpY29uTmFtZX1cbiAgICAgICAgY29sb3I9e2dldEljb25Db2xvcigpfVxuICAgICAgICBzaXplPXtpY29uU2l6ZX1cbiAgICAgICAgY2xhc3NOYW1lPVwibXItMlwiXG4gICAgICAvPlxuICAgICk7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxUb3VjaGFibGVPcGFjaXR5XG4gICAgICBjbGFzc05hbWU9e3dyYXBwZXJDbGFzc31cbiAgICAgIHN0eWxlPXt7IGhlaWdodDogNDAgfX1cbiAgICAgIGRpc2FibGVkPXtkaXNhYmxlZH1cbiAgICAgIHsuLi5yZXN0fVxuICAgID5cbiAgICAgIHtwcmVmaXhWaWV3fVxuICAgICAge21haW5WaWV3fVxuICAgICAge3N1ZmZpeFZpZXd9XG4gICAgPC9Ub3VjaGFibGVPcGFjaXR5PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQnV0dG9uO1xuIl19
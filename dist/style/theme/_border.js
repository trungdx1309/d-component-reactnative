/* eslint-disable import/prefer-default-export */
import { StyleSheet } from "react-native";
import AppColors from "../constant/AppColors";
import AppSizes from "../constant/AppSizes";
import { generateStyleValue } from "../modifier";
const {
  borderTiny,
  borderMedium,
  borderSmall,
  borderLarge,
  borderXLarge,
  borderRadiusTiny,
  borderRadiusSmall,
  borderRadiusMedium,
  borderRadiusLarge,
  borderRadiusXLarge
} = AppSizes;
const {
  greyColor
} = AppColors;
export const BORDER_WIDTH_VARIATIONS = {
  border: "borderWidth",
  "border-top": "borderTopWidth",
  "border-bottom": "borderBottomWidth",
  "border-left": "borderLeftWidth",
  "border-right": "borderRightWidth",
  "border-start": "borderLeftWidth",
  "border-end": "borderRightWidth"
};
export const BORDER_RADIUS_VARIATIONS = {
  rounded: "borderRadius",
  "rounded-top-left": "borderTopLeftRadius",
  "rounded-top-right": "borderTopRightRadius",
  "rounded-bottom-left": "borderBottomLeftRadius",
  "rounded-bottom-right": "borderBottomRightRadius",
  "rounded-top": ["borderTopLeftRadius", "borderTopRightRadius"],
  "rounded-bottom": ["borderBottomLeftRadius", "borderBottomRightRadius"],
  "rounded-left": ["borderTopLeftRadius", "borderBottomLeftRadius"],
  "rounded-right": ["borderTopRightRadius", "borderBottomRightRadius"],
  "rounded-start": ["borderTopLeftRadius", "borderBottomLeftRadius"],
  "rounded-end": ["borderTopRightRadius", "borderBottomRightRadius"]
};
export const BORDER_WIDTH_VALUES = {
  "": borderTiny,
  1: borderSmall,
  2: borderMedium,
  3: borderLarge,
  4: borderXLarge
};
export const BORDER_RADIUS_VALUES = {
  "": borderRadiusTiny,
  1: borderRadiusSmall,
  2: borderRadiusMedium,
  3: borderRadiusLarge,
  4: borderRadiusXLarge
};
const borderColorClass = generateStyleValue({
  border: "borderColor"
}, AppColors);
const borderWidthClass = generateStyleValue(BORDER_WIDTH_VARIATIONS, BORDER_WIDTH_VALUES, {
  borderColor: greyColor
});
const borderRadiusClass = generateStyleValue(BORDER_RADIUS_VARIATIONS, BORDER_RADIUS_VALUES, {
  borderColor: greyColor
});
console.log({
  borderRadiusClass
});
const borderStyle = StyleSheet.create({
  "border-dashed": {
    borderWidth: borderSmall,
    borderColor: greyColor,
    borderStyle: "dashed"
  },
  "rounded-pill": {
    borderRadius: 999
  },
  ...borderColorClass,
  ...borderWidthClass,
  ...borderRadiusClass
});
export default borderStyle;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHlsZS90aGVtZS9fYm9yZGVyLnRzIl0sIm5hbWVzIjpbIlN0eWxlU2hlZXQiLCJBcHBDb2xvcnMiLCJBcHBTaXplcyIsImdlbmVyYXRlU3R5bGVWYWx1ZSIsImJvcmRlclRpbnkiLCJib3JkZXJNZWRpdW0iLCJib3JkZXJTbWFsbCIsImJvcmRlckxhcmdlIiwiYm9yZGVyWExhcmdlIiwiYm9yZGVyUmFkaXVzVGlueSIsImJvcmRlclJhZGl1c1NtYWxsIiwiYm9yZGVyUmFkaXVzTWVkaXVtIiwiYm9yZGVyUmFkaXVzTGFyZ2UiLCJib3JkZXJSYWRpdXNYTGFyZ2UiLCJncmV5Q29sb3IiLCJCT1JERVJfV0lEVEhfVkFSSUFUSU9OUyIsImJvcmRlciIsIkJPUkRFUl9SQURJVVNfVkFSSUFUSU9OUyIsInJvdW5kZWQiLCJCT1JERVJfV0lEVEhfVkFMVUVTIiwiQk9SREVSX1JBRElVU19WQUxVRVMiLCJib3JkZXJDb2xvckNsYXNzIiwiYm9yZGVyV2lkdGhDbGFzcyIsImJvcmRlckNvbG9yIiwiYm9yZGVyUmFkaXVzQ2xhc3MiLCJjb25zb2xlIiwibG9nIiwiYm9yZGVyU3R5bGUiLCJjcmVhdGUiLCJib3JkZXJXaWR0aCIsImJvcmRlclJhZGl1cyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQSxTQUFTQSxVQUFULFFBQTJCLGNBQTNCO0FBQ0EsT0FBT0MsU0FBUDtBQUNBLE9BQU9DLFFBQVA7QUFDQSxTQUFTQyxrQkFBVDtBQUVBLE1BQU07QUFDSkMsRUFBQUEsVUFESTtBQUVKQyxFQUFBQSxZQUZJO0FBR0pDLEVBQUFBLFdBSEk7QUFJSkMsRUFBQUEsV0FKSTtBQUtKQyxFQUFBQSxZQUxJO0FBTUpDLEVBQUFBLGdCQU5JO0FBT0pDLEVBQUFBLGlCQVBJO0FBUUpDLEVBQUFBLGtCQVJJO0FBU0pDLEVBQUFBLGlCQVRJO0FBVUpDLEVBQUFBO0FBVkksSUFXRlgsUUFYSjtBQWFBLE1BQU07QUFBRVksRUFBQUE7QUFBRixJQUFnQmIsU0FBdEI7QUFFQSxPQUFPLE1BQU1jLHVCQUF1QixHQUFHO0FBQ3JDQyxFQUFBQSxNQUFNLEVBQUUsYUFENkI7QUFFckMsZ0JBQWMsZ0JBRnVCO0FBR3JDLG1CQUFpQixtQkFIb0I7QUFJckMsaUJBQWUsaUJBSnNCO0FBS3JDLGtCQUFnQixrQkFMcUI7QUFNckMsa0JBQWdCLGlCQU5xQjtBQU9yQyxnQkFBYztBQVB1QixDQUFoQztBQVVQLE9BQU8sTUFBTUMsd0JBQXdCLEdBQUc7QUFDdENDLEVBQUFBLE9BQU8sRUFBRSxjQUQ2QjtBQUV0QyxzQkFBb0IscUJBRmtCO0FBR3RDLHVCQUFxQixzQkFIaUI7QUFJdEMseUJBQXVCLHdCQUplO0FBS3RDLDBCQUF3Qix5QkFMYztBQU10QyxpQkFBZSxDQUFDLHFCQUFELEVBQXdCLHNCQUF4QixDQU51QjtBQU90QyxvQkFBa0IsQ0FBQyx3QkFBRCxFQUEyQix5QkFBM0IsQ0FQb0I7QUFRdEMsa0JBQWdCLENBQUMscUJBQUQsRUFBd0Isd0JBQXhCLENBUnNCO0FBU3RDLG1CQUFpQixDQUFDLHNCQUFELEVBQXlCLHlCQUF6QixDQVRxQjtBQVV0QyxtQkFBaUIsQ0FBQyxxQkFBRCxFQUF3Qix3QkFBeEIsQ0FWcUI7QUFXdEMsaUJBQWUsQ0FBQyxzQkFBRCxFQUF5Qix5QkFBekI7QUFYdUIsQ0FBakM7QUFjUCxPQUFPLE1BQU1DLG1CQUFtQixHQUFHO0FBQ2pDLE1BQUlmLFVBRDZCO0FBRWpDLEtBQUdFLFdBRjhCO0FBR2pDLEtBQUdELFlBSDhCO0FBSWpDLEtBQUdFLFdBSjhCO0FBS2pDLEtBQUdDO0FBTDhCLENBQTVCO0FBUVAsT0FBTyxNQUFNWSxvQkFBb0IsR0FBRztBQUNsQyxNQUFJWCxnQkFEOEI7QUFFbEMsS0FBR0MsaUJBRitCO0FBR2xDLEtBQUdDLGtCQUgrQjtBQUlsQyxLQUFHQyxpQkFKK0I7QUFLbEMsS0FBR0M7QUFMK0IsQ0FBN0I7QUFRUCxNQUFNUSxnQkFBZ0IsR0FBR2xCLGtCQUFrQixDQUN6QztBQUFFYSxFQUFBQSxNQUFNLEVBQUU7QUFBVixDQUR5QyxFQUV6Q2YsU0FGeUMsQ0FBM0M7QUFLQSxNQUFNcUIsZ0JBQWdCLEdBQUduQixrQkFBa0IsQ0FDekNZLHVCQUR5QyxFQUV6Q0ksbUJBRnlDLEVBR3pDO0FBQUVJLEVBQUFBLFdBQVcsRUFBRVQ7QUFBZixDQUh5QyxDQUEzQztBQU1BLE1BQU1VLGlCQUFpQixHQUFHckIsa0JBQWtCLENBQzFDYyx3QkFEMEMsRUFFMUNHLG9CQUYwQyxFQUcxQztBQUFFRyxFQUFBQSxXQUFXLEVBQUVUO0FBQWYsQ0FIMEMsQ0FBNUM7QUFNQVcsT0FBTyxDQUFDQyxHQUFSLENBQVk7QUFBRUYsRUFBQUE7QUFBRixDQUFaO0FBRUEsTUFBTUcsV0FBVyxHQUFHM0IsVUFBVSxDQUFDNEIsTUFBWCxDQUFrQjtBQUNwQyxtQkFBaUI7QUFDZkMsSUFBQUEsV0FBVyxFQUFFdkIsV0FERTtBQUVmaUIsSUFBQUEsV0FBVyxFQUFFVCxTQUZFO0FBR2ZhLElBQUFBLFdBQVcsRUFBRTtBQUhFLEdBRG1CO0FBTXBDLGtCQUFnQjtBQUNkRyxJQUFBQSxZQUFZLEVBQUU7QUFEQSxHQU5vQjtBQVNwQyxLQUFHVCxnQkFUaUM7QUFVcEMsS0FBR0MsZ0JBVmlDO0FBV3BDLEtBQUdFO0FBWGlDLENBQWxCLENBQXBCO0FBY0EsZUFBZUcsV0FBZiIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9wcmVmZXItZGVmYXVsdC1leHBvcnQgKi9cbmltcG9ydCB7IFN0eWxlU2hlZXQgfSBmcm9tIFwicmVhY3QtbmF0aXZlXCI7XG5pbXBvcnQgQXBwQ29sb3JzIGZyb20gXCIuLi9jb25zdGFudC9BcHBDb2xvcnNcIjtcbmltcG9ydCBBcHBTaXplcyBmcm9tIFwiLi4vY29uc3RhbnQvQXBwU2l6ZXNcIjtcbmltcG9ydCB7IGdlbmVyYXRlU3R5bGVWYWx1ZSB9IGZyb20gXCIuLi9tb2RpZmllclwiO1xuXG5jb25zdCB7XG4gIGJvcmRlclRpbnksXG4gIGJvcmRlck1lZGl1bSxcbiAgYm9yZGVyU21hbGwsXG4gIGJvcmRlckxhcmdlLFxuICBib3JkZXJYTGFyZ2UsXG4gIGJvcmRlclJhZGl1c1RpbnksXG4gIGJvcmRlclJhZGl1c1NtYWxsLFxuICBib3JkZXJSYWRpdXNNZWRpdW0sXG4gIGJvcmRlclJhZGl1c0xhcmdlLFxuICBib3JkZXJSYWRpdXNYTGFyZ2UsXG59ID0gQXBwU2l6ZXM7XG5cbmNvbnN0IHsgZ3JleUNvbG9yIH0gPSBBcHBDb2xvcnM7XG5cbmV4cG9ydCBjb25zdCBCT1JERVJfV0lEVEhfVkFSSUFUSU9OUyA9IHtcbiAgYm9yZGVyOiBcImJvcmRlcldpZHRoXCIsXG4gIFwiYm9yZGVyLXRvcFwiOiBcImJvcmRlclRvcFdpZHRoXCIsXG4gIFwiYm9yZGVyLWJvdHRvbVwiOiBcImJvcmRlckJvdHRvbVdpZHRoXCIsXG4gIFwiYm9yZGVyLWxlZnRcIjogXCJib3JkZXJMZWZ0V2lkdGhcIixcbiAgXCJib3JkZXItcmlnaHRcIjogXCJib3JkZXJSaWdodFdpZHRoXCIsXG4gIFwiYm9yZGVyLXN0YXJ0XCI6IFwiYm9yZGVyTGVmdFdpZHRoXCIsXG4gIFwiYm9yZGVyLWVuZFwiOiBcImJvcmRlclJpZ2h0V2lkdGhcIixcbn07XG5cbmV4cG9ydCBjb25zdCBCT1JERVJfUkFESVVTX1ZBUklBVElPTlMgPSB7XG4gIHJvdW5kZWQ6IFwiYm9yZGVyUmFkaXVzXCIsXG4gIFwicm91bmRlZC10b3AtbGVmdFwiOiBcImJvcmRlclRvcExlZnRSYWRpdXNcIixcbiAgXCJyb3VuZGVkLXRvcC1yaWdodFwiOiBcImJvcmRlclRvcFJpZ2h0UmFkaXVzXCIsXG4gIFwicm91bmRlZC1ib3R0b20tbGVmdFwiOiBcImJvcmRlckJvdHRvbUxlZnRSYWRpdXNcIixcbiAgXCJyb3VuZGVkLWJvdHRvbS1yaWdodFwiOiBcImJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzXCIsXG4gIFwicm91bmRlZC10b3BcIjogW1wiYm9yZGVyVG9wTGVmdFJhZGl1c1wiLCBcImJvcmRlclRvcFJpZ2h0UmFkaXVzXCJdLFxuICBcInJvdW5kZWQtYm90dG9tXCI6IFtcImJvcmRlckJvdHRvbUxlZnRSYWRpdXNcIiwgXCJib3JkZXJCb3R0b21SaWdodFJhZGl1c1wiXSxcbiAgXCJyb3VuZGVkLWxlZnRcIjogW1wiYm9yZGVyVG9wTGVmdFJhZGl1c1wiLCBcImJvcmRlckJvdHRvbUxlZnRSYWRpdXNcIl0sXG4gIFwicm91bmRlZC1yaWdodFwiOiBbXCJib3JkZXJUb3BSaWdodFJhZGl1c1wiLCBcImJvcmRlckJvdHRvbVJpZ2h0UmFkaXVzXCJdLFxuICBcInJvdW5kZWQtc3RhcnRcIjogW1wiYm9yZGVyVG9wTGVmdFJhZGl1c1wiLCBcImJvcmRlckJvdHRvbUxlZnRSYWRpdXNcIl0sXG4gIFwicm91bmRlZC1lbmRcIjogW1wiYm9yZGVyVG9wUmlnaHRSYWRpdXNcIiwgXCJib3JkZXJCb3R0b21SaWdodFJhZGl1c1wiXSxcbn07XG5cbmV4cG9ydCBjb25zdCBCT1JERVJfV0lEVEhfVkFMVUVTID0ge1xuICBcIlwiOiBib3JkZXJUaW55LFxuICAxOiBib3JkZXJTbWFsbCxcbiAgMjogYm9yZGVyTWVkaXVtLFxuICAzOiBib3JkZXJMYXJnZSxcbiAgNDogYm9yZGVyWExhcmdlLFxufTtcblxuZXhwb3J0IGNvbnN0IEJPUkRFUl9SQURJVVNfVkFMVUVTID0ge1xuICBcIlwiOiBib3JkZXJSYWRpdXNUaW55LFxuICAxOiBib3JkZXJSYWRpdXNTbWFsbCxcbiAgMjogYm9yZGVyUmFkaXVzTWVkaXVtLFxuICAzOiBib3JkZXJSYWRpdXNMYXJnZSxcbiAgNDogYm9yZGVyUmFkaXVzWExhcmdlLFxufTtcblxuY29uc3QgYm9yZGVyQ29sb3JDbGFzcyA9IGdlbmVyYXRlU3R5bGVWYWx1ZShcbiAgeyBib3JkZXI6IFwiYm9yZGVyQ29sb3JcIiB9LFxuICBBcHBDb2xvcnNcbik7XG5cbmNvbnN0IGJvcmRlcldpZHRoQ2xhc3MgPSBnZW5lcmF0ZVN0eWxlVmFsdWUoXG4gIEJPUkRFUl9XSURUSF9WQVJJQVRJT05TLFxuICBCT1JERVJfV0lEVEhfVkFMVUVTLFxuICB7IGJvcmRlckNvbG9yOiBncmV5Q29sb3IgfVxuKTtcblxuY29uc3QgYm9yZGVyUmFkaXVzQ2xhc3MgPSBnZW5lcmF0ZVN0eWxlVmFsdWUoXG4gIEJPUkRFUl9SQURJVVNfVkFSSUFUSU9OUyxcbiAgQk9SREVSX1JBRElVU19WQUxVRVMsXG4gIHsgYm9yZGVyQ29sb3I6IGdyZXlDb2xvciB9XG4pO1xuXG5jb25zb2xlLmxvZyh7IGJvcmRlclJhZGl1c0NsYXNzIH0pO1xuXG5jb25zdCBib3JkZXJTdHlsZSA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgXCJib3JkZXItZGFzaGVkXCI6IHtcbiAgICBib3JkZXJXaWR0aDogYm9yZGVyU21hbGwsXG4gICAgYm9yZGVyQ29sb3I6IGdyZXlDb2xvcixcbiAgICBib3JkZXJTdHlsZTogXCJkYXNoZWRcIixcbiAgfSxcbiAgXCJyb3VuZGVkLXBpbGxcIjoge1xuICAgIGJvcmRlclJhZGl1czogOTk5LFxuICB9LFxuICAuLi5ib3JkZXJDb2xvckNsYXNzLFxuICAuLi5ib3JkZXJXaWR0aENsYXNzLFxuICAuLi5ib3JkZXJSYWRpdXNDbGFzcyxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBib3JkZXJTdHlsZTtcbiJdfQ==
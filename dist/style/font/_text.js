import { StyleSheet, Platform } from "react-native";
import AppColors from "../constant/AppColors";
import { generateStyleValue } from "../modifier";
const textColorClass = generateStyleValue({
  text: "color"
}, AppColors);
export const base = {
  fontSize: 10,
  lineHeight: 12,
  ...Platform.select({
    ios: {
      fontFamily: "Poppins-Regular"
    },
    android: {
      fontFamily: "Poppins-Reg"
    }
  })
};
export const TEXT_ALIGN_VARIANTS = {
  text: "textAlign"
};
export const TEXT_DECOR_VARIANTS = {
  text: "textDecorationLine"
};
export const TEXT_TRANSFORM_VARIANTS = {
  text: "textTransform"
};
export const TEXT_ALIGN_VALUE = {
  auto: "auto",
  start: "left",
  left: "left",
  end: "right",
  right: "right",
  center: "center",
  justify: "justify"
};
export const TEXT_DECOR_VALUE = {
  none: "none",
  underline: "underline",
  "line-through": "line-through",
  "underline line-through": "underline line-through"
};
export const TEXT_TRANSFORM_VALUE = {
  capitalize: "capitalize",
  uppercase: "uppercase",
  lowercase: "lowercase"
};
const textAlignClass = generateStyleValue(TEXT_ALIGN_VARIANTS, TEXT_ALIGN_VALUE);
const textDecorClass = generateStyleValue(TEXT_DECOR_VARIANTS, TEXT_DECOR_VALUE);
const textTransformClass = generateStyleValue(TEXT_TRANSFORM_VARIANTS, TEXT_TRANSFORM_VALUE);
const textStyle = StyleSheet.create({
  h0: { ...base,
    fontSize: base.fontSize * 2,
    lineHeight: base.fontSize * 2 * 1.1
  },
  h1: { ...base,
    fontSize: base.fontSize * 1.8,
    lineHeight: base.fontSize * 1.8 * 1.2
  },
  h2: { ...base,
    fontSize: base.fontSize * 1.6,
    lineHeight: base.fontSize * 1.6 * 1.3
  },
  h3: { ...base,
    fontSize: base.fontSize * 1.4,
    lineHeight: base.fontSize * 1.4 * 1.4
  },
  h4: { ...base,
    fontSize: base.fontSize * 1.2,
    lineHeight: base.fontSize * 1.2 * 1.5
  },
  h5: { ...base
  },
  text: { ...base
  },
  "font-weight-bold": {
    fontWeight: "bold"
  },
  ...textColorClass,
  ...textAlignClass,
  ...textDecorClass,
  ...textTransformClass
});
export default textStyle;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9zdHlsZS9mb250L190ZXh0LnRzIl0sIm5hbWVzIjpbIlN0eWxlU2hlZXQiLCJQbGF0Zm9ybSIsIkFwcENvbG9ycyIsImdlbmVyYXRlU3R5bGVWYWx1ZSIsInRleHRDb2xvckNsYXNzIiwidGV4dCIsImJhc2UiLCJmb250U2l6ZSIsImxpbmVIZWlnaHQiLCJzZWxlY3QiLCJpb3MiLCJmb250RmFtaWx5IiwiYW5kcm9pZCIsIlRFWFRfQUxJR05fVkFSSUFOVFMiLCJURVhUX0RFQ09SX1ZBUklBTlRTIiwiVEVYVF9UUkFOU0ZPUk1fVkFSSUFOVFMiLCJURVhUX0FMSUdOX1ZBTFVFIiwiYXV0byIsInN0YXJ0IiwibGVmdCIsImVuZCIsInJpZ2h0IiwiY2VudGVyIiwianVzdGlmeSIsIlRFWFRfREVDT1JfVkFMVUUiLCJub25lIiwidW5kZXJsaW5lIiwiVEVYVF9UUkFOU0ZPUk1fVkFMVUUiLCJjYXBpdGFsaXplIiwidXBwZXJjYXNlIiwibG93ZXJjYXNlIiwidGV4dEFsaWduQ2xhc3MiLCJ0ZXh0RGVjb3JDbGFzcyIsInRleHRUcmFuc2Zvcm1DbGFzcyIsInRleHRTdHlsZSIsImNyZWF0ZSIsImgwIiwiaDEiLCJoMiIsImgzIiwiaDQiLCJoNSIsImZvbnRXZWlnaHQiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLFVBQVQsRUFBcUJDLFFBQXJCLFFBQXFDLGNBQXJDO0FBQ0EsT0FBT0MsU0FBUDtBQUNBLFNBQVNDLGtCQUFUO0FBRUEsTUFBTUMsY0FBYyxHQUFHRCxrQkFBa0IsQ0FBQztBQUFFRSxFQUFBQSxJQUFJLEVBQUU7QUFBUixDQUFELEVBQW9CSCxTQUFwQixDQUF6QztBQUVBLE9BQU8sTUFBTUksSUFBSSxHQUFHO0FBQ2xCQyxFQUFBQSxRQUFRLEVBQUUsRUFEUTtBQUVsQkMsRUFBQUEsVUFBVSxFQUFFLEVBRk07QUFHbEIsS0FBR1AsUUFBUSxDQUFDUSxNQUFULENBQWdCO0FBQ2pCQyxJQUFBQSxHQUFHLEVBQUU7QUFDSEMsTUFB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QUhoQyxHQXJCOEI7QUEwQmxDa0MsRUFBQUEsRUFBRSxFQUFFLEVBQUUsR0FBR25DO0FBQUwsR0ExQjhCO0FBMkJsQ0QsRUFBQUEsSUFBSSxFQUFFLEVBQUUsR0FBR0M7QUFBTCxHQTNCNEI7QUE0QmxDLHNCQUFvQjtBQUNsQm9DLElBQUFBLFVBQVUsRUFBRTtBQURNLEdBNUJjO0FBK0JsQyxLQUFHdEMsY0EvQitCO0FBZ0NsQyxLQUFHMkIsY0FoQytCO0FBaUNsQyxLQUFHQyxjQWpDK0I7QUFrQ2xDLEtBQUdDO0FBbEMrQixDQUFsQixDQUFsQjtBQXFDQSxlQUFlQyxTQUFmIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3R5bGVTaGVldCwgUGxhdGZvcm0gfSBmcm9tIFwicmVhY3QtbmF0aXZlXCI7XG5pbXBvcnQgQXBwQ29sb3JzIGZyb20gXCIuLi9jb25zdGFudC9BcHBDb2xvcnNcIjtcbmltcG9ydCB7IGdlbmVyYXRlU3R5bGVWYWx1ZSB9IGZyb20gXCIuLi9tb2RpZmllclwiO1xuXG5jb25zdCB0ZXh0Q29sb3JDbGFzcyA9IGdlbmVyYXRlU3R5bGVWYWx1ZSh7IHRleHQ6IFwiY29sb3JcIiB9LCBBcHBDb2xvcnMpO1xuXG5leHBvcnQgY29uc3QgYmFzZSA9IHtcbiAgZm9udFNpemU6IDEwLFxuICBsaW5lSGVpZ2h0OiAxMixcbiAgLi4uUGxhdGZvcm0uc2VsZWN0KHtcbiAgICBpb3M6IHtcbiAgICAgIGZvbnRGYW1pbHk6IFwiUG9wcGlucy1SZWd1bGFyXCIsXG4gICAgfSxcbiAgICBhbmRyb2lkOiB7XG4gICAgICBmb250RmFtaWx5OiBcIlBvcHBpbnMtUmVnXCIsXG4gICAgfSxcbiAgfSksXG59O1xuXG5leHBvcnQgY29uc3QgVEVYVF9BTElHTl9WQVJJQU5UUyA9IHsgdGV4dDogXCJ0ZXh0QWxpZ25cIiB9O1xuZXhwb3J0IGNvbnN0IFRFWFRfREVDT1JfVkFSSUFOVFMgPSB7IHRleHQ6IFwidGV4dERlY29yYXRpb25MaW5lXCIgfTtcbmV4cG9ydCBjb25zdCBURVhUX1RSQU5TRk9STV9WQVJJQU5UUyA9IHsgdGV4dDogXCJ0ZXh0VHJhbnNmb3JtXCIgfTtcblxuZXhwb3J0IGNvbnN0IFRFWFRfQUxJR05fVkFMVUUgPSB7XG4gIGF1dG86IFwiYXV0b1wiLFxuICBzdGFydDogXCJsZWZ0XCIsXG4gIGxlZnQ6IFwibGVmdFwiLFxuICBlbmQ6IFwicmlnaHRcIixcbiAgcmlnaHQ6IFwicmlnaHRcIixcbiAgY2VudGVyOiBcImNlbnRlclwiLFxuICBqdXN0aWZ5OiBcImp1c3RpZnlcIixcbn07XG5cbmV4cG9ydCBjb25zdCBURVhUX0RFQ09SX1ZBTFVFID0ge1xuICBub25lOiBcIm5vbmVcIixcbiAgdW5kZXJsaW5lOiBcInVuZGVybGluZVwiLFxuICBcImxpbmUtdGhyb3VnaFwiOiBcImxpbmUtdGhyb3VnaFwiLFxuICBcInVuZGVybGluZSBsaW5lLXRocm91Z2hcIjogXCJ1bmRlcmxpbmUgbGluZS10aHJvdWdoXCIsXG59O1xuXG5leHBvcnQgY29uc3QgVEVYVF9UUkFOU0ZPUk1fVkFMVUUgPSB7XG4gIGNhcGl0YWxpemU6IFwiY2FwaXRhbGl6ZVwiLFxuICB1cHBlcmNhc2U6IFwidXBwZXJjYXNlXCIsXG4gIGxvd2VyY2FzZTogXCJsb3dlcmNhc2VcIixcbn07XG5cbmNvbnN0IHRleHRBbGlnbkNsYXNzID0gZ2VuZXJhdGVTdHlsZVZhbHVlKFxuICBURVhUX0FMSUdOX1ZBUklBTlRTLFxuICBURVhUX0FMSUdOX1ZBTFVFXG4pO1xuXG5jb25zdCB0ZXh0RGVjb3JDbGFzcyA9IGdlbmVyYXRlU3R5bGVWYWx1ZShcbiAgVEVYVF9ERUNPUl9WQVJJQU5UUyxcbiAgVEVYVF9ERUNPUl9WQUxVRVxuKTtcblxuY29uc3QgdGV4dFRyYW5zZm9ybUNsYXNzID0gZ2VuZXJhdGVTdHlsZVZhbHVlKFxuICBURVhUX1RSQU5TRk9STV9WQVJJQU5UUyxcbiAgVEVYVF9UUkFOU0ZPUk1fVkFMVUVcbik7XG5cbmNvbnN0IHRleHRTdHlsZSA9IFN0eWxlU2hlZXQuY3JlYXRlKHtcbiAgaDA6IHtcbiAgICAuLi5iYXNlLFxuICAgIGZvbnRTaXplOiBiYXNlLmZvbnRTaXplICogMixcbiAgICBsaW5lSGVpZ2h0OiBiYXNlLmZvbnRTaXplICogMiAqIDEuMSxcbiAgfSxcbiAgaDE6IHtcbiAgICAuLi5iYXNlLFxuICAgIGZvbnRTaXplOiBiYXNlLmZvbnRTaXplICogMS44LFxuICAgIGxpbmVIZWlnaHQ6IGJhc2UuZm9udFNpemUgKiAxLjggKiAxLjIsXG4gIH0sXG4gIGgyOiB7XG4gICAgLi4uYmFzZSxcbiAgICBmb250U2l6ZTogYmFzZS5mb250U2l6ZSAqIDEuNixcbiAgICBsaW5lSGVpZ2h0OiBiYXNlLmZvbnRTaXplICogMS42ICogMS4zLFxuICB9LFxuICBoMzoge1xuICAgIC4uLmJhc2UsXG4gICAgZm9udFNpemU6IGJhc2UuZm9udFNpemUgKiAxLjQsXG4gICAgbGluZUhlaWdodDogYmFzZS5mb250U2l6ZSAqIDEuNCAqIDEuNCxcbiAgfSxcbiAgaDQ6IHtcbiAgICAuLi5iYXNlLFxuICAgIGZvbnRTaXplOiBiYXNlLmZvbnRTaXplICogMS4yLFxuICAgIGxpbmVIZWlnaHQ6IGJhc2UuZm9udFNpemUgKiAxLjIgKiAxLjUsXG4gIH0sXG4gIGg1OiB7IC4uLmJhc2UgfSxcbiAgdGV4dDogeyAuLi5iYXNlIH0sXG4gIFwiZm9udC13ZWlnaHQtYm9sZFwiOiB7XG4gICAgZm9udFdlaWdodDogXCJib2xkXCIsXG4gIH0sXG4gIC4uLnRleHRDb2xvckNsYXNzLFxuICAuLi50ZXh0QWxpZ25DbGFzcyxcbiAgLi4udGV4dERlY29yQ2xhc3MsXG4gIC4uLnRleHRUcmFuc2Zvcm1DbGFzcyxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB0ZXh0U3R5bGU7XG4iXX0=